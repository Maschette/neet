source('~/Documents/repos/neet/analysis/diagram.R', echo=TRUE)
source('~/Documents/repos/neet/analysis/diagram.R', echo=TRUE)
source('~/Documents/repos/neet/analysis/diagram.R', echo=TRUE)
source('~/Documents/repos/neet/analysis/diagram.R', echo=TRUE)
source('~/Documents/repos/neet/analysis/diagram.R', echo=TRUE)
source('~/Documents/repos/neet/analysis/diagram.R', echo=TRUE)
source('~/Documents/repos/neet/analysis/diagram.R', echo=TRUE)
points
source('~/Documents/repos/neet/analysis/diagram.R', echo=TRUE)
library(neet)
workflow()
library(neet)
workflow()
points
library(neet)
library(neet)
workflow()
library(neet)
workflow()
library(neet)
library(neet)
workflow()
library(neet)
workflow()
library(neet)
workflow()
library(neet)
library(neet)
workflow()
?conflicted::conflict_prefer
library(neet)
source('~/Documents/repos/neet/R/diagram.R', echo=TRUE)
library(neet)
workflow()
workflow()
library(neet)
workflow()
?slice
library(neet)
library(neet)
workflow()
library(neet)
workflow()
library(neet)
workflow()
library(neet)
rm(list = ls())
library(neet)
workflow()
library(neet)
workflow()
progress = 0
source('~/Documents/repos/neet/R/workflow.R', echo=TRUE)
conflicted::conflict_prefer(name = "filter", winner = "dplyr", quiet = TRUE)
n <- 600
offset <- seq(from = 0,
to = 1,
length = n)
loop <- tibble::tibble(
theta = seq(
from = 0,
to = 6 * pi,
length = n
),
x = -cos(theta) + offset,
y = sin(theta)
) %>%
dplyr::mutate(progress = dplyr::row_number())
fetchpoints <- function(cut_off) {
loop %>%
filter(theta <= cut_off) %>%
dplyr::slice(nrow(.))
}
points <-
c(0, 2 * pi / 3, 4 * pi / 3) %>% c(., . + 2 * pi, . + 4 * pi, 6 * pi) %>%
purrr::map_df(fetchpoints) %>%
dplyr::mutate(label = c("code::registration",
"tests",
"code") %>% rep(3)
)
source('~/Documents/repos/neet/R/workflow.R', echo=TRUE)
source('~/Documents/repos/neet/R/workflow.R', echo=TRUE)
points <-
c(0, 2 * pi / 3, 4 * pi / 3) %>% c(., . + 2 * pi, . + 4 * pi, 6 * pi) %>%
purrr::map_df(fetchpoints) %>%
dplyr::mutate(label = c("code::registration",
"tests",
"code") %>% rep(3)
source('~/Documents/repos/neet/R/workflow.R', echo=TRUE)
source('~/Documents/repos/neet/R/workflow.R', echo=TRUE)
source('~/Documents/repos/neet/R/workflow.R', echo=TRUE)
workflow
loop <- tibble::tibble(
theta = seq(
from = 0,
to = 6 * pi,
length = n
),
x = -cos(theta) + offset,
y = sin(theta)
) %>%
dplyr::mutate(progress = dplyr::row_number())
fetchpoints <- function(cut_off) {
loop %>%
dplyr::filter(theta <= cut_off) %>%
dplyr::slice(nrow(.))
}
loop
fetchpoints <- function(cut_off) {
loop %>%
dplyr::filter(theta <= cut_off) %>%
dplyr::slice(nrow(.))
}
points <-
c(0, 2 * pi / 3, 4 * pi / 3) %>% c(., . + 2 * pi, . + 4 * pi, 6 * pi) %>%
purrr::map_df(fetchpoints) %>%
dplyr::mutate(label = c("code::registration",
"tests",
"code") %>% rep(3) %>% c(., "code::registration")
)
points
neet_labels <- c("one neet", "all neets", "and the rest")
neets <- points %>%
filter(label == "tests") %>%
dplyr::mutate(test = neet_labels,
test = fct_relevel(neet_labels))
neets <- points %>%
dplyr::filter(label == "tests") %>%
dplyr::mutate(test = neet_labels,
test = fct_relevel(neet_labels))
neets <- points %>%
dplyr::filter(label == "tests") %>%
dplyr::mutate(test = neet_labels,
test = forcats::fct_relevel(neet_labels))
neetst
neets
source('~/Documents/repos/neet/R/workflow.R', echo=TRUE)
source('~/Documents/repos/neet/R/workflow.R', echo=TRUE)
workflow
points
library(neet)
workflow()
workflow(1)
points
points %>% pluck("theta")
cut_off <- points[progress, ] %>% purrr::pluck("theta")
cut_off
cut_off <- points[progress, ] %>% purrr::pluck("theta")
progress <- 1
cut_off <- points[progress, ] %>% purrr::pluck("theta")
cut_off
library(neet)
workflow()
workflow(1)
workflow(1)
library(neet)
library(neet)
workflow(1)
library(neet)
workflow(1)
workflow(2)
workflow(6)
library(neet)
workflow(6)
library(neet)
workflow(6)
library(neet)
workflow(6)
workflow(5)
workflow(3)
reprex::reprex()
source('~/.active-rstudio-document', echo=TRUE)
plot_layout(workflow, workflow(1))
plot_grid(workflow, workflow(1))
source('~/.active-rstudio-document', echo=TRUE)
plot_grid(workflow, workflow(1),workflow(3),workflow(5), ncol=1)
plot_grid(workflow, workflow(1),workflow(3),workflow(5),workflow(7), ncol=1)
source('~/.active-rstudio-document', echo=TRUE)
workflow(3)
library(neet)
workflow(3)
workflow(4)
workflow(5)
workflow(6)
workflow(2)
workflow(3)
workflow(4)
workflow(5)
workflow(6)
workflow(8)
c(6, 6.1,6.2) %>% sample(1)
xaringan::inf_mr()
xaringan::inf_mr()
workflow(3)
workflow(4)
workflow(5)
workflow(6)
xaringan::inf_mr()
workflow(4)
library(neet)
workflow(4)
workflow(5)
workflow(4)
library(neet)
workflow::neet(6)
neet::workflow(4)
c(6,6.1,6.2) %>% sample(1)
c(6, 6.1,6.21, 6.22) %>% sample(1)
c(0,1,1.1,1.2,1.3,2,2.1,2.2,3,4,5,7,8,6,6.1,6.21) %>% sample(2)
23/(7*15)
c(5.2,5.3,5.4,6,6.1,6.3,7.1,7.3,8) %>% sample(3)
25/(7*18)
c(5.2,5.3,5.4,6,6.1,6.3,7.1,7.3,8) %>% sample(3)
neet::workflow(5)
workflow(1)
neet::workflow(1)
library(neet)
library(neet)
library(neet)
test_neet(iris, "data.frame", "test")
workflow(2)
xaringan::inf_mr()
neet::workflow(5)
xaringan::inf_mr()
knitr::opts_chunk$set(echo = TRUE,
fig.height = 2.3,
fig.width = 5,
fig.align = "center",
message=FALSE)
workflow(1)
citr:::insert_citation()
expect_success(log(1))
test_that("log function works", {
expect_success(log(1))
})
test_that("log function works", {
expect_neet(log(3))
})
test_that("log function works", {
expect_neet(log(3), "numeric")
})
test_that("log function works", {
expect_neet(log(-1), "numeric")
})
xaringan::inf_mr()
library(neet)
xaringan::inf_mr()
quack()
duck()
# write function
duck <- function() {"quack!"}
duck
duck()
duck(3)
test_that("function fails with input", {
expect_error(duck(3))
})
library(neet)
29/(7*19)
5/(18*7)
3/ (5*7) + 2/((18-5) * 3)
c(0,1,1.1,1.2,1.3,2,2.1,2.2,2.3,3.1,3.2,3.3,4)
c(0,1,1.1,1.2,1.3,2,2.1,2.2,2.3,3.1,3.2,3.3,4) %>% sample(3)
workflow(2)
neet::workflow(2)
neet::workflow(5)
neet::workflow(5)
?notempty
?notempty
??notempty
library(neet)
assert_neet(3, 'characgter')
library(neet)
assert_neet(3, "character")
library(neet)
library(neet)
library(neet)
library(neet)
library(dppaggregators)
QuizWAgg(expert_judgements_frankenstein)
library(neet)
QuizWAgg(expert_judgements_frankenstein)
assert_neet(expert_judgements_frankenstein, "data.frame")
expect_nonempty(expert_judgements_aaron)
library(neet)
expect_nonempty(expert_judgements_aaron)
expect_nonempty.data.frame(expert_judgements_aaron)
library(neet)
library(neet)
expect_nonempty(expert_judgements_frankenstein)
expect_nonempty <- function(thing_to_test) {
UseMethod("expect_nonempty)")
}
# default -----------------------------------------------------------------
#' @export
# default neet
expect_nonempty.default <-
function(thing_to_test) {
"no neet test for this object"
}
expect_nonempty()
expect_nonempty.default <-
function(thing_to_test) {
"no neet test for this object"
}
expect_nonempty()
library(neet)
library(neet)
expect_nonempty()
library(neet)
expect_nonempty <- function(thing_to_test) {
UseMethod("expect_nonempty)")
}
expect_neet(3)
expect_neet(3, "nmeric")
expect_neet(3, "numeric")
expect_nonempty.default <-
function(thing_to_test) {
"no neet test for this object"
}
expect_nonempty <- function(thing_to_test) {
UseMethod("expect_nonempty)")
}
expect_nonempty()
expect_nonempty(3)
expect_nonempty.numeric <-
function(thing_to_test, positive_only = FALSE) {
# test to see if na
expect_false(any(is.na(thing_to_test)))
expect_false(is.null(thing_to_test))
# infs
expect_false(
any(abs(as.numeric(thing_to_test)) == Inf))
# non-empty
expect_true(length(thing_to_test) > 0)
}
expect_nonempty(3)
library(neet)
assert_neet(3, "numeric")
assert_neet(3, "character")
library(neet)
library(neet)
workflow(6)
workflow(8)
workflow(1)
?ShiftWagg
workflow(1)
workflow(1)
library(neet)
library(neet)
library(neet)
library(neet)
library(neet)
workflow(1)
library(neet)
workflow(1)
?geom_path
library(neet)
workflow(3)
workflow(1)
library(neet)
workflow(1)
workflow(1)
library(neet)
workflow(4)
workflow(3)
library(neet)
workflow(5)
library(neet)
library(neet)
workflow(5)
n <- 600
offset <- seq(from = 0,
to = 1,
length = n)
loop <- tibble::tibble(
theta = seq(
from = 0,
to = 6 * pi,
length = n
),
x = -cos(theta) + offset,
y = sin(theta)
) %>%
dplyr::mutate(progress = dplyr::row_number())
fetchpoints <- function(cut_off) {
loop %>%
dplyr::filter(theta <= cut_off) %>%
dplyr::slice(nrow(.))
}
points <-
c(0, 2 * pi / 3, 4 * pi / 3) %>% c(., . + 2 * pi, . + 4 * pi, 6 * pi) %>%
purrr::map_df(fetchpoints) %>%
dplyr::mutate(label = c("code::registration",
"tests",
"code") %>% rep(3) %>% c(., "code::registration")
n <- 600
offset <- seq(from = 0,
to = 1,
length = n)
loop <- tibble::tibble(
theta = seq(
from = 0,
to = 6 * pi,
length = n
),
x = -cos(theta) + offset,
y = sin(theta)
) %>%
dplyr::mutate(progress = dplyr::row_number())
fetchpoints <- function(cut_off) {
loop %>%
dplyr::filter(theta <= cut_off) %>%
dplyr::slice(nrow(.))
}
points <-
c(0, 2 * pi / 3, 4 * pi / 3) %>% c(., . + 2 * pi, . + 4 * pi, 6 * pi) %>%
purrr::map_df(fetchpoints) %>%
dplyr::mutate(label = c("code::registration",
"tests",
"code") %>% rep(3) %>% c(., "code::registration")
)
n <- 600
offset <- seq(from = 0,
to = 1,
length = n)
loop <- tibble::tibble(
theta = seq(
from = 0,
to = 6 * pi,
length = n
),
x = -cos(theta) + offset,
y = sin(theta)
) %>%
dplyr::mutate(progress = dplyr::row_number())
fetchpoints <- function(cut_off) {
loop %>%
dplyr::filter(theta <= cut_off) %>%
dplyr::slice(nrow(.))
}
points <-
c(0, 2 * pi / 3, 4 * pi / 3) %>% c(., . + 2 * pi, . + 4 * pi, 6 * pi) %>%
purrr::map_df(fetchpoints) %>%
dplyr::mutate(label = c("code::registration",
"tests",
"code") %>% rep(3) %>% c(., "code::registration")
)
n <- 600
offset <- seq(from = 0,
to = 1,
length = n)
loop <- tibble::tibble(
theta = seq(
from = 0,
to = 6 * pi,
length = n
),
x = -cos(theta) + offset,
y = sin(theta)
) %>%
dplyr::mutate(progress = dplyr::row_number())
fetchpoints <- function(cut_off) {
loop %>%
dplyr::filter(theta <= cut_off) %>%
dplyr::slice(nrow(.))
}
points <-
c(0, 2 * pi / 3, 4 * pi / 3) %>% c(., . + 2 * pi, . + 4 * pi, 6 * pi) %>%
purrr::map_df(fetchpoints) %>%
dplyr::mutate(label = c("code::registration",
"tests",
"code") %>% rep(3) %>% c(., "code::registration")
)
neet_labels <- c("one neet", "all neets", "and the rest")
neets <- points %>%
dplyr::filter(label == "tests") %>%
dplyr::mutate(test = neet_labels,
test = forcats::fct_relevel(test, neet_labels),
label = forcats::fct_relevel(label, "code::registration", "tests", "code"))
points
points %>% levels()
library(neet)
points %>% levels()
workflow(3)
?as.factor
library(neet)
workflow(3)
library(neet)
workflow(3)
library(neet)
workflow(3)
library(neet)
workflow(3)
library(neet)
workflow(1)
library(neet)
library(neet)
workflow(1)
library(neet)
workflow(1)
library(neet)
library(neet)
workflow(1)
library(neet)
workflow(4)
library(neet)
workflow(4)
workflow(5)
workflow(1)
library(neet)
workflow(1)
